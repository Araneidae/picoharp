record(waveform, "$(DEVICE):FILL") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT))fill")
  field(FTVL, "DOUBLE")
  field(NELM, "65536")
  field(DESC, "Raw picoharp signal")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(waveform, "$(DEVICE):BUCKETS") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT))buckets")
  field(FTVL, "DOUBLE")
  field(NELM, "936")
  field(DESC, "Fill pattern")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}
record(waveform, "$(DEVICE):BUCKETS_60") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT))buckets60")
  field(FTVL, "DOUBLE")
  field(NELM, "936")
  field(DESC, "Fill pattern 60s")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(waveform, "$(DEVICE):BUCKETS_180") {
  field(DTYP, "asynFloat64ArrayIn")
  field(INP,  "@asyn($(PORT))buckets180")
  field(FTVL, "DOUBLE")
  field(NELM, "936")
  field(DESC, "Fill pattern 180s")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ao, "$(DEVICE):PEAK") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))peak")
  field(EGU,  "bins")
  field(PREC, "0")
  field(LOPR, "1")
  field(HOPR, "63")
  field(DESC, "Offset of first peak")
}

record(ao, "$(DEVICE):PK_AUTO") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))pk_auto")
  field(EGU,  "bins")
  field(PREC, "0")
  field(LOPR, "0")
  field(HOPR, "1")
  field(DESC, "set auto-adjust peak")
}

record(ai, "$(DEVICE):FLUX") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))flux")
  field(EGU,  "count/turn")
  field(PREC, "3")
  field(DESC, "Counts observed per turn")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):NFLUX") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))nflux")
  field(EGU,  "count/turn/nC")
  field(PREC, "1")
  field(DESC, "Normalised counts observed per turn")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ao, "$(DEVICE):TIME") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))time")
  field(EGU,  "ms")
  field(PREC, "0")
  field(LOPR, "1")
  field(HOPR, "60000")
  field(DESC, "Acquisition time")
}

record(ai, "$(DEVICE):MAX_BIN") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))max_bin")
  field(EGU,  "counts")
  field(HIGH, "59000")
  field(HIHI, "65535")
  field(HSV,  "MINOR")
  field(HHSV, "MAJOR")
  field(DESC, "Maximum bin count")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ao, "$(DEVICE):SHIFT") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))shift")
  field(EGU,  "bucket")
  field(PREC, "0")
  field(LOPR, "0")
  field(HOPR, "935")
  field(DESC, "Circular Shift")
}

record(ai, "$(DEVICE):COUNTS_FILL") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))counts_fill")
  field(EGU,  "Counts")
  field(PREC, "0")
  field(DESC, "Total Counts from FILL")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):COUNTS_5") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))counts_5")
  field(EGU,  "Counts")
  field(PREC, "0")
  field(DESC, "Total Counts BUCKETS")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):COUNTS_60") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))counts_60")
  field(EGU,  "Counts")
  field(PREC, "0")
  field(DESC, "Total Counts BUCKETS_60")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):COUNTS_180") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))counts_180")
  field(EGU,  "Counts")
  field(PREC, "0")
  field(DESC, "Total Counts BUCKETS_180")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):SOCS_60") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))socs_60")
  field(EGU,  "nC^2")
  field(PREC, "0")
  field(DESC, "Total counts squared")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):SOCS_180") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))socs_180")
  field(EGU,  "nC^2")
  field(PREC, "0")
  field(DESC, "Total counts squared")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):SOCS_5") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))socs_5")
  field(EGU,  "nC^2")
  field(PREC, "0")
  field(DESC, "Total counts squared")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):COUNT_RATE_0") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))count_rate_0")
  field(EGU,  "Hz")
  field(PREC, "0")
  field(DESC, "Master clock count rate")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ai, "$(DEVICE):COUNT_RATE_1") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT))count_rate_1")
  field(EGU,  "Hz")
  field(PREC, "0")
  field(DESC, "Sample data count rate")
  field(SCAN, "Event")
  field(EVNT, "$(EVENT)")
}

record(ao, "$(DEVICE):DCCT") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))charge")
  field(DOL,  "SR21C-DI-DCCT-01:CHARGE CP MS")
  field(OMSL, "closed_loop")
  field(DESC, "DCCT charge")
}

record(ao, "$(DEVICE):DCCT:ALARM") {
  field(SCAN, ".1 second")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))dcct_alarm")
  field(DOL,  "$(DEVICE):DCCT.SEVR")
  field(OMSL, "closed_loop")
  field(DESC, "DCCT alarm status")
}

record(ao, "$(DEVICE):FREQ") {
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT))freq")
  field(DOL,  "LI-RF-MOSC-01:FREQ CP MS")
  field(OMSL, "closed_loop")
  field(DESC, "Master oscillator frequency")
}

record(stringin, "$(DEVICE):ERROR") {
  field(SCAN, "1 second")
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT))")
  field(DESC, "Picoharp error string")
}

